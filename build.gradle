import groovy.json.JsonSlurper

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'me.champeau.gradle.jmh' version '0.4.7'
    // 0.12*rc* drops requirement on native git, which might be useful
    id 'com.palantir.git-version' version '0.12.0-rc2'
    id 'java'
    id 'distribution'
}

dependencies {
    compile files("${projectDir}/tools/repack/asm-re-6.2.1.jar")
    testCompile 'org.apache.commons:commons-text:1.4'
    testCompile 'com.google.code.gson:gson:2.8.5'
    testCompile 'com.google.guava:guava:26.0-jre'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    // maven tool
    testCompile 'org.apache.maven.indexer:indexer-core:6.0.0'
    testCompile 'org.apache.maven:maven-artifact:3.6.0'
    testCompile 'org.apache.maven.wagon:wagon-http:3.2.0'
    testCompile 'org.eclipse.sisu:org.eclipse.sisu.plexus:0.3.3'

    jmh 'com.google.guava:guava:26.0-jre'
}

def extended_version() {
    def ver = "git:" + gitVersion()
    def travis_build = System.getenv("TRAVIS_BUILD_NUMBER")
    if (travis_build) {
        ver += " travis:" + travis_build
    }

    ver
}

final resDir = new File("$projectDir/src/main/resources")
assert resDir.isDirectory() || resDir.mkdirs()

task versionTxt() << {
    new File(resDir, "version.txt").text = extended_version()
}

versionTxt.outputs.upToDateWhen { false }

final methodsInput = new File("${projectDir}/java-method-snapshot.json")
final methodsOutput = new File(resDir, "methods.properties")

task methodsToProperties() << {
    def parse = new JsonSlurper()
    def snapshot = parse.parse(methodsInput)
    def i = 0

    def filters = "# generated by ${extended_version()}\n"

    snapshot.each { record ->
        i += 1
        def method = record.methodId

        // remove extension (.java, .scala, .groovy, etc.)
        def fullClassName = method.filePath.replaceFirst(/\.[a-z]{3,5}$/, '')

        // read "collect" as in "map" in any other language
        def versions = record.version
                .collect { exp -> exp.replaceAll(/\s+/, '') }
                .join(' ')

        filters += "filter.provided-${i}.paths = ${fullClassName}#${method.methodName}\n"
        filters += "filter.provided-${i}.artifact = maven:${record.packageName}\n"
        filters += "filter.provided-${i}.version = ${versions}\n"
        filters += "\n"
    }

    methodsOutput.text = filters
}

methodsToProperties.inputs.files(methodsInput)
methodsToProperties.outputs.files(methodsOutput)

processResources.dependsOn versionTxt
processResources.dependsOn methodsToProperties
build.dependsOn shadowJar
distZip.dependsOn shadowJar

jar {
    baseName = 'without-deps'

    manifest {
        attributes 'Extended-Version-Info': extended_version()
        attributes 'Premain-Class': 'io.snyk.agent.jvm.EntryPoint'
        attributes 'Can-Retransform-Classes': true
    }
}

shadowJar {
    mergeServiceFiles()

    baseName = 'snyk-java-runtime-agent'
    classifier = null
    version = null
}

// It would be great to use shadowDistZip here, but it doesn't want to play nice.
// It wants us to be an application, and hence it wants us to ship shell scripts.
// It seems easier to pick up src/main/dist, and ram b/l/agent.jar in afterwards.
distributions {
    main {
        baseName = 'snyk-java-runtime-agent'
        contents {
            from ("build/libs") {
                include "snyk-java-runtime-agent.jar"
            }
            from("src/main/resources") {
                include "version.txt"
            }
            from("./") {
                include "LICENSE"
            }
        }
    }
}

distZip {
    // This prevents it from placing the version number, which we're not using,
    // in the archive name, and as the prefix for every path in the archive.
    archiveName = "snyk-java-runtime-agent.zip"
}

test {
    useJUnitPlatform()
}

jmh {
    // severely limit the time benchmarks take to run
    fork = 1
    iterations = 1
    warmupIterations = 1
}

repositories {
    mavenCentral()
    jcenter()
}

wrapper {
    gradleVersion = "4.9"
    distributionType = Wrapper.DistributionType.ALL
}
